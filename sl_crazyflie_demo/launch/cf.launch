<launch>
<arg name="wand_topic"/>
<arg name="wand_frame_id"/>
<arg name="cf_uri"/>
<arg name="cf_pose"/>
<arg name="cf_frame_id"/>
<arg name="prefix"/>
<arg name="collvoid_file"/>
<arg name="obstacle_manager_id"/>
<arg name="dwm1000_goal_active" default="False"/>
<arg name="dwm1000_goal_id" default="1"/>
<arg name="dwm1000_obstacle_active" default="False" />
<arg name="deactivate_angle_network" default="False" />
<arg name="dwm1000_obstacle_ids" default="[]" />
<arg name="wand_offset" default="0.5" />

<arg name="dwm_distance_offset" default="0.0"/>
<arg name="genome_file"/>
<arg name="external_cmd_topic" default="external_cmd"/>

    <!--<param name="crazyflie/pid_rate/yaw_kp" value="200"/>-->
     <node pkg="crazyflie_driver" type="crazyflie_add" name="crazyflie_add" output="screen">
      <param name="uri" value="$(arg cf_uri)" />
      <param name="tf_prefix" value="$(arg prefix)" />
      <rosparam> 
        genericLogTopics: ["log_ranges"]
        <!--genericLogTopicFrequencies: [100]-->
        genericLogTopicFrequencies: [20]
        genericLogTopic_log_ranges_Variables: ["ranging.distance1", "ranging.distance2", "ranging.distance3", "ranging.distance4", "ranging.distance5", "ranging.distance6", "ranging.state"]
      </rosparam>


    </node>


    <!-- Note that axis IDs are those from the joystick message plus one, to be able to invert axes by specifiying either positive or negative axis numbers.-->
    <!-- Axis 2 from joy message thus has to be set as '3' or '-3'(inverted mode) below-->
    <node name="sl_crazyflie_teleop" pkg="sl_crazyflie_controller" type="sl_crazyflie_teleop.py" output="screen">
       <param name="x_axis" value="4"/>
       <param name="y_axis" value="3"/>
       <param name="z_axis" value="2"/>
       <param name="yaw_axis" value="1"/>
       <param name="x_joy_max" value="30"/>
       <param name="y_joy_max" value="-30"/>
       <param name="z_joy_max" value="60000"/>
       <param name="yaw_joy_max" value="-200"/>
       <param name="x_vel_max" value="1.2"/>
       <param name="y_vel_max" value="1.2"/>
       <param name="z_vel_max" value="1.2"/>
       <param name="yaw_vel_max" value="5.0"/>
       <param name="pid_tuning_active" value="False"/>
       <param name="joy_topic" value="joy" />
       <!--remap from="cmd_vel" to="teleop/cmd_vel"/-->
    </node>


    <node name="follow_pose" pkg="sl_crazyflie_controller" type="pose_follower.py" output="screen" >
      <param name="pose_topic" value="$(arg wand_topic)" />
      <param name="pose_frame_id" value="$(arg wand_frame_id)" />
      <param name="z_offset" value="$(arg wand_offset)"/>
    </node>


    <node name="flight_controller" pkg="sl_crazyflie_controller" type="flight_controller.py" output="screen">
	    <rosparam command="load" file="$(find sl_crazyflie_controller)/cfg/pid_position.yaml"/>
	    <rosparam command="load" file="$(find sl_crazyflie_controller)/cfg/pid_velocity.yaml"/>
	    <rosparam command="load" file="$(find sl_crazyflie_controller)/cfg/$(arg collvoid_file)"/>
	    <rosparam command="load" file="$(find sl_crazyflie_controller)/cfg/dwm1000sensor.yaml"/>
	    <param name="external_cmd_topic" value="$(arg external_cmd_topic)"/>
	    <param name="pid_tuning_active" value="True"/>
	    <param name="cf_pose_topic" value="$(arg cf_pose)"/>
	    <param name="pid_tuning_active" value="False"/>
	    <param name="obstacle_manager_id" value="$(arg obstacle_manager_id)"/>
	    <param name="collvoid/nn_controller_dwm1000/dwm1000_goal_active" value="$(arg dwm1000_goal_active)"/>
	    <param name="collvoid/nn_controller_dwm1000/dwm1000_obstacle_active" value="$(arg dwm1000_obstacle_active)"/>
	    <param name="collvoid/nn_controller_dwm1000/dwm1000_goal_id" value="$(arg dwm1000_goal_id)"/>
	    <param name="collvoid/nn_controller_dwm1000/deactivate_angle_network" value="$(arg deactivate_angle_network)"/>
	    <param name="collvoid/nn_controller_dwm1000/cf_frame_id" value="$(arg cf_frame_id)"/>
	    <!--<param name="collvoid/nn_controller_dwm1000/dwm1000_obstacle_ids" value="$(arg dwm1000_obstacle_ids)"/>-->
        <rosparam param="collvoid/nn_controller_dwm1000/dwm1000_obstacle_ids" subst_value="true">$(arg dwm1000_obstacle_ids)</rosparam>
	    <param name="collvoid/nn_controller_dwm1000/dwm_distance_offset" value="$(arg dwm_distance_offset)"/>
	    <!--param name="collvoid/Genome_file" value="$(arg genome_file)"/-->

    </node>


    <node name="segment_follower" pkg="sl_crazyflie_pathfollowing" type="SegmentFollower.py" output="screen">
    	<param name="pose_topic" value="$(arg cf_pose)"/>
    </node>


  </launch>
